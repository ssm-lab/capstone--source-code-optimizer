import logging
import os
from pathlib import Path
import sys
import subprocess
import pandas as pd

from codecarbon import EmissionsTracker
from measurements.base_energy_meter import BaseEnergyMeter
from tempfile import TemporaryDirectory


class CodeCarbonEnergyMeter(BaseEnergyMeter):
    def __init__(self, file_path: Path):
        """
        Initializes the CodeCarbonEnergyMeter with a file path and logger.

        :param file_path: Path to the file to measure energy consumption.
        :param logger: Logger instance for logging events.
        """
        super().__init__(file_path)
        self.emissions_data = None

    def measure_energy(self):
        """
        Measures the carbon emissions for the specified file by running it with CodeCarbon.
        Logs each step and stores the emissions data if available.
        """
        logging.info(f"Starting CodeCarbon energy measurement on {self.file_path.name}")

        with TemporaryDirectory() as custom_temp_dir:
            os.environ["TEMP"] = custom_temp_dir  # For Windows
            os.environ["TMPDIR"] = custom_temp_dir  # For Unix-based systems

            # TODO: Save to logger so doesn't print to console
            tracker = EmissionsTracker(output_dir=custom_temp_dir, allow_multiple_runs=True)  # type: ignore
            tracker.start()

            try:
                subprocess.run(
                    [sys.executable, self.file_path], capture_output=True, text=True, check=True
                )
                logging.info("CodeCarbon measurement completed successfully.")
            except subprocess.CalledProcessError as e:
                logging.info(f"Error executing file '{self.file_path}': {e}")
            finally:
                self.emissions = tracker.stop()
                emissions_file = custom_temp_dir / Path("emissions.csv")

                if emissions_file.exists():
                    self.emissions_data = self.extract_emissions_csv(emissions_file)
                else:
                    logging.info("Emissions file was not created due to an error during execution.")
                    self.emissions_data = None

    def extract_emissions_csv(self, csv_file_path: Path):
        """
        Extracts emissions data from a CSV file generated by CodeCarbon.

        :param csv_file_path: Path to the CSV file.
        :return: Dictionary containing the last row of emissions data or None if an error occurs.
        """
        str_csv_path = str(csv_file_path)
        if csv_file_path.exists():
            try:
                df = pd.read_csv(str_csv_path)
                return df.to_dict(orient="records")[-1]
            except Exception as e:
                logging.info(f"Error reading file '{str_csv_path}': {e}")
                return None
        else:
            logging.info(f"File '{str_csv_path}' does not exist.")
            return None
