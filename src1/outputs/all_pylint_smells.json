[
    {
        "column": 74,
        "endColumn": null,
        "endLine": null,
        "line": 19,
        "message": "Trailing whitespace",
        "message-id": "C0303",
        "module": "ineffcient_code_example_2",
        "obj": "",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "trailing-whitespace",
        "type": "convention"
    },
    {
        "column": 95,
        "endColumn": null,
        "endLine": null,
        "line": 35,
        "message": "Trailing whitespace",
        "message-id": "C0303",
        "module": "ineffcient_code_example_2",
        "obj": "",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "trailing-whitespace",
        "type": "convention"
    },
    {
        "column": 0,
        "endColumn": null,
        "endLine": null,
        "line": 35,
        "message": "Line too long (95/80)",
        "message-id": "C0301",
        "module": "ineffcient_code_example_2",
        "obj": "",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "line-too-long",
        "type": "convention"
    },
    {
        "column": 71,
        "endColumn": null,
        "endLine": null,
        "line": 59,
        "message": "Trailing whitespace",
        "message-id": "C0303",
        "module": "ineffcient_code_example_2",
        "obj": "",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "trailing-whitespace",
        "type": "convention"
    },
    {
        "column": 0,
        "endColumn": null,
        "endLine": null,
        "line": 1,
        "message": "Missing module docstring",
        "message-id": "C0114",
        "module": "ineffcient_code_example_2",
        "obj": "",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-module-docstring",
        "type": "convention"
    },
    {
        "column": 0,
        "endColumn": 19,
        "endLine": 2,
        "line": 2,
        "message": "Missing class docstring",
        "message-id": "C0115",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-class-docstring",
        "type": "convention"
    },
    {
        "column": 4,
        "endColumn": 24,
        "endLine": 8,
        "line": 8,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.process_all_data",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 19,
        "endColumn": 28,
        "endLine": 15,
        "line": 15,
        "message": "Catching too general exception Exception",
        "message-id": "W0718",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.process_all_data",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "broad-exception-caught",
        "type": "warning"
    },
    {
        "column": 12,
        "endColumn": 46,
        "endLine": 16,
        "line": 11,
        "message": "try clause contains 2 statements, expected at most 1",
        "message-id": "W0717",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.process_all_data",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-try-statements",
        "type": "warning"
    },
    {
        "column": 35,
        "endColumn": 43,
        "endLine": 20,
        "line": 19,
        "message": "Used builtin function 'filter'. Using a list comprehension can be clearer.",
        "message-id": "W0141",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.process_all_data",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "bad-builtin",
        "type": "warning"
    },
    {
        "column": 4,
        "endColumn": 27,
        "endLine": 24,
        "line": 24,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 4,
        "endColumn": 27,
        "endLine": 24,
        "line": 24,
        "message": "Too many arguments (8/6)",
        "message-id": "R0913",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-arguments",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 27,
        "endLine": 24,
        "line": 24,
        "message": "Too many positional arguments (8/5)",
        "message-id": "R0917",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-positional-arguments",
        "type": "refactor"
    },
    {
        "column": 11,
        "endColumn": 34,
        "endLine": 26,
        "line": 26,
        "message": "Consider using a named constant or an enum instead of ''multiply''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 13,
        "endColumn": 31,
        "endLine": 28,
        "line": 28,
        "message": "Consider using a named constant or an enum instead of ''add''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 34,
        "endColumn": 39,
        "endLine": 24,
        "line": 24,
        "message": "Unused argument 'flag1'",
        "message-id": "W0613",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "unused-argument",
        "type": "warning"
    },
    {
        "column": 41,
        "endColumn": 46,
        "endLine": 24,
        "line": 24,
        "message": "Unused argument 'flag2'",
        "message-id": "W0613",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "unused-argument",
        "type": "warning"
    },
    {
        "column": 19,
        "endColumn": 25,
        "endLine": 25,
        "line": 25,
        "message": "Unused argument 'option'",
        "message-id": "W0613",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "unused-argument",
        "type": "warning"
    },
    {
        "column": 27,
        "endColumn": 38,
        "endLine": 25,
        "line": 25,
        "message": "Unused argument 'final_stage'",
        "message-id": "W0613",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.complex_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "unused-argument",
        "type": "warning"
    },
    {
        "column": 4,
        "endColumn": 31,
        "endLine": 35,
        "line": 35,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 4,
        "endColumn": 31,
        "endLine": 35,
        "line": 35,
        "message": "Too many arguments (12/6)",
        "message-id": "R0913",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-arguments",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 31,
        "endLine": 35,
        "line": 35,
        "message": "Too many positional arguments (12/5)",
        "message-id": "R0917",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-positional-arguments",
        "type": "refactor"
    },
    {
        "column": 11,
        "endColumn": 34,
        "endLine": 38,
        "line": 38,
        "message": "Consider using a named constant or an enum instead of ''multiply''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 13,
        "endColumn": 31,
        "endLine": 40,
        "line": 40,
        "message": "Consider using a named constant or an enum instead of ''add''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 13,
        "endColumn": 28,
        "endLine": 42,
        "line": 42,
        "message": "Consider using a named constant or an enum instead of ''true''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 13,
        "endColumn": 28,
        "endLine": 44,
        "line": 44,
        "message": "Consider using a named constant or an enum instead of ''true''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 13,
        "endColumn": 28,
        "endLine": 46,
        "line": 46,
        "message": "Consider using a named constant or an enum instead of ''true''.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 31,
        "endLine": 35,
        "line": 35,
        "message": "Too many branches (7/3)",
        "message-id": "R0912",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-branches",
        "type": "refactor"
    },
    {
        "column": 43,
        "endColumn": 49,
        "endLine": 36,
        "line": 36,
        "message": "Unused argument 'option'",
        "message-id": "W0613",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "unused-argument",
        "type": "warning"
    },
    {
        "column": 51,
        "endColumn": 62,
        "endLine": 36,
        "line": 36,
        "message": "Unused argument 'final_stage'",
        "message-id": "W0613",
        "module": "ineffcient_code_example_2",
        "obj": "DataProcessor.multi_param_calculation",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "unused-argument",
        "type": "warning"
    },
    {
        "column": 0,
        "endColumn": 23,
        "endLine": 55,
        "line": 55,
        "message": "Missing class docstring",
        "message-id": "C0115",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-class-docstring",
        "type": "convention"
    },
    {
        "column": 4,
        "endColumn": 18,
        "endLine": 58,
        "line": 58,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.check_data",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 24,
        "endColumn": 33,
        "endLine": 59,
        "line": 59,
        "message": "Consider using a named constant or an enum instead of '10'.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.check_data",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 29,
        "endLine": 62,
        "line": 62,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.complex_comprehension",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 44,
        "endColumn": 51,
        "endLine": 64,
        "line": 64,
        "message": "Consider using a named constant or an enum instead of '50'.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.complex_comprehension",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 56,
        "endColumn": 61,
        "endLine": 64,
        "line": 64,
        "message": "Consider using a named constant or an enum instead of '3'.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.complex_comprehension",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 18,
        "endLine": 66,
        "line": 66,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_chain",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 8,
        "endColumn": 23,
        "endLine": 72,
        "line": 67,
        "message": "try clause contains 2 statements, expected at most 1",
        "message-id": "W0717",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_chain",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-try-statements",
        "type": "warning"
    },
    {
        "column": 4,
        "endColumn": 27,
        "endLine": 75,
        "line": 75,
        "message": "Missing function or method docstring",
        "message-id": "C0116",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_scope_chaining",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "missing-function-docstring",
        "type": "convention"
    },
    {
        "column": 31,
        "endColumn": 53,
        "endLine": 81,
        "line": 81,
        "message": "Consider using a named constant or an enum instead of '25'.",
        "message-id": "R2004",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_scope_chaining",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "magic-value-comparison",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 27,
        "endLine": 75,
        "line": 75,
        "message": "Too many branches (6/3)",
        "message-id": "R0912",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_scope_chaining",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-branches",
        "type": "refactor"
    },
    {
        "column": 8,
        "endColumn": 45,
        "endLine": 82,
        "line": 76,
        "message": "Too many nested blocks (6/3)",
        "message-id": "R1702",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_scope_chaining",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "too-many-nested-blocks",
        "type": "refactor"
    },
    {
        "column": 4,
        "endColumn": 27,
        "endLine": 75,
        "line": 75,
        "message": "Either all return statements in a function should return an expression, or none of them should.",
        "message-id": "R1710",
        "module": "ineffcient_code_example_2",
        "obj": "AdvancedProcessor.long_scope_chaining",
        "path": "tests/input/ineffcient_code_example_2.py",
        "symbol": "inconsistent-return-statements",
        "type": "refactor"
    },
    {
        "absolutePath": "/Users/mya/Code/Capstone/capstone--source-code-optimizer/tests/input/ineffcient_code_example_2.py",
        "column": 18,
        "confidence": "UNDEFINED",
        "endColumn": null,
        "endLine": null,
        "line": 18,
        "message": "Method chain too long (3/3)",
        "message-id": "LMC001",
        "module": "ineffcient_code_example_2.py",
        "obj": "",
        "path": "/Users/mya/Code/Capstone/capstone--source-code-optimizer/tests/input/ineffcient_code_example_2.py",
        "symbol": "long-message-chain",
        "type": "convention"
    }
]